#+TITLE: Tammer's Emacs Configuration
#+AUTHOR: Tammer Ibrahim
#+STARTUP: overview

This is my Emacs configuration file, in literate programming style (based on
[[https://blog.thomasheartman.com/posts/configuring-emacs-with-org-mode-and-literate-programming][this tutorial]]). It is primarily geared towards building a comfortable and
productive environment for documenting and managing Linux systems using Puppet.
It is organized into various categories with some explanation for configuration
decisions.

* Dependencies

In addition to a standard release of Emacs, full functionality of this config
will require working installations of:

  - git
  - puppet-lint
  - hunspell

* Bootstrap
** straight.el
This configuration is largely orchestrated using the wonderful, functional
[[https://github.com/radian-software/straight.el][straight.el]]. It requires this bit of emacs-lisp to bootstrap itself.

#+begin_src emacs-lisp

  ;; disable package.el in favor of straight.el
  (setq package-enable-at-startup nil)

  ;; for use with native compilation
  (setq straight-repository-branch "develop")

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** no-littering
This gets called early to structure the Emacs local configuration directory.

#+begin_src emacs-lisp

  (use-package no-littering
    :ensure
    :config
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    ;; navtively set file locks to save to /var/tmp
    (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))
      ;; don't clutter directories with auto-save files
    (setq backup-directory-alist
	  `(("." . ,(concat user-emacs-directory "backups"))))
    ;; always create a new backup file
    (setq backup-by-copying t))

#+end_src

* UI
** General

Emacs is wonderful for its ability to totally transform its user interface to
fit the needs of its user. Its an incredible example of what programmable
extensiblity can achieve.

Let's start by reducing some visual complexity and setting a nice font. I'm also
going to turn off native compilation warnings because they're a visual nusiance,
and add a git gutter.

#+begin_src emacs-lisp

  ;; reduce visual complexity
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

  ;; use a nice font
  (add-to-list 'default-frame-alist '(font . "SF Mono-9:weight=medium"))

  ;; line numbers
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'markdown-mode-hook #'display-line-numbers-mode)

  ;; do horizontal splits by default
  (setq split-width-threshold nil)
  (setq split-height-threshold 0)

  ;; silence native compilation warnings
  (setq warning-minimum-level :error)

  ;; diminish modes for specific packages
  (use-package diminish :ensure t)

  ;; use a git gutter
  (use-package git-gutter
    :diminish
    :init (global-git-gutter-mode +1))

#+end_src

** Mouse

While I mostly use the keyboard for navigation, its handy to reach for the mouse
on occasion.

#+begin_src emacs-lisp

  (xterm-mouse-mode 1)
  (pixel-scroll-precision-mode 1)
  (setq mouse-wheel-follow-mouse 't)

  ;; natural scrolling without moving the point

  (defun gcm-scroll-down ()
      (interactive)
      (scroll-down 1))

  

#+end_src

** Modeline

#+begin_src emacs-lisp

  (use-package simple-modeline
  :init (simple-modeline-mode 1))

#+end_src

** Theme

If you're in the Emacs world, hopefully you've come across [[https://protesilaos.com][prot]] and his
revolutionary Emacs packages. His approach to creating Emacs themes prioritizes
readability and usability of the text UI. Critical for a productive environment.

#+begin_src emacs-lisp

  (use-package ef-themes
    :straight (ef-themes :type git :host github :repo "protesilaos/ef-themes")
    :ensure
    :config
    (setq ef-themes-to-toggle '(ef-day ef-dream))
    :init
    (ef-themes-select 'ef-day))

#+end_src

* Usability Enhancements

#+begin_src emacs-lisp

  ;; nobody double spaces prose sentances
  (setq sentence-end-double-space nil)

  ;; enable line-wrapping for prose
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default fill-column 80)

  ;; Unbind Pesky Sleep Button
  (global-unset-key [(control z)])
  (global-unset-key [(control x)(control z)])

  ;; insert over selected regions
  (delete-selection-mode t)

#+end_src

** Utility Packages

#+begin_src emacs-lisp

  (use-package aggressive-indent
    :init (global-aggressive-indent-mode 1))

  (use-package undo-tree
    :init (undo-tree-mode t))

  (use-package multiple-cursors
    :bind ("C-c m" . 'mc/edit-lines))

#+end_src

* Functions and Keys

Emacs is short for `Editor MACroS`, and of course key bindings and elisp
functions are the core enablers of productivity.

** Helper Functions

#+begin_src emacs-lisp

  (defun ti/quit-window ()
    "Quickly quit buffers"
    (interactive)
    (funcall 'quit-window '(KILL-BUFFER get-buffer-window)))

  (defun ti/kill-beginning-of-line ()
    "Kill to beginning of line like Bash"
    (interactive)
    (kill-line 0))

  (defun ti/get-branch-name ()
    "Get current git branch name"
    (shell-command-to-string "printf %s \"$(git branch --show-current)\""))

  (defun ti/new-project-folder ()
    "Create new directory with branch name"
    (interactive)
    (dired-create-directory (ti/get-branch-name)))

#+end_src

** Global Bindings

#+begin_src emacs-lisp
    
  (bind-keys*
     ("M-u" . universal-argument) 
     ("<f8>" .  save-buffer)
     ("<f7>" .  project-switch-project)
     ("<f10>" . other-window)
     ("C-u" . ti/kill-beginning-of-line)
     ("C-x k" . ti/quit-window))

  ;; required to be specified as a translation
  (keyboard-translate ?\C-h ?\C-?)

#+end_src

* Tooling

The true essense of Emacs is the wide community of computing enthusiasts who
extend its functionality.

** Flyspell

For propper spelling.

#+begin_src emacs-lisp

  (use-package flyspell
  :diminish
  :custom
  (setq ispell-program-name "hunspell")
  (setq ispell-really-hunspell t)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (global-set-key (kbd "<f6>") 'ispell-word))

#+end_src

** Major Mode Packages

#+begin_src emacs-lisp

  (use-package markdown-mode
    :init
    (add-to-list 'auto-mode-alist
  	     '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . gfm-mode))
)

  (use-package apache-mode)

  (use-package nagios-mode)

  (use-package crontab-mode)

  (use-package systemd)

  (use-package puppet-mode)
  
  (use-package flymake-collection)

  (use-package flymake-puppet)

#+end_src

** Org

#+begin_src emacs-lisp

  ;; basic setup
  (require 'org-tempo)
  (setq org-support-shift-select t)
  (setq org-replace-disputed-keys t)
  (setq org-ellipsis "â–¼")
  (setq org-support-shift-select t)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (shell . t)))

  ;; ;; shortcut for creating headers
  ;;  (add-to-list 'org-structure-template-alist
  ;;            '("hdr" . (lambda ()
  ;;                        (concat "#+TITLE: Your Title\n"
  ;;                                "#+AUTHOR: Author Name\n"
  ;;                                "#+DATE: " (format-time-string "%Y-%m-%d") "\n"))))

#+end_src

** VTerm

The VTerm project is the most robust solution for terminal emulation within
emacs

#+begin_src emacs-lisp

  (use-package vterm
    :config
    (setq vterm-term-environment-variable "xterm-16color")
    ;; Function to hide the mode line
    (defun hide-mode-line ()
      "Hide the mode line in the current buffer."
      (setq-local mode-line-format nil))
      ;; Add the function to vterm-mode-hook
    (add-hook 'vterm-mode-hook 'hide-mode-line)

    ;; pass C-u
    (add-hook 'vterm-mode-hook
      (lambda ()
	(local-unset-key (kbd "C-u")))))

    (use-package vterm-toggle
      :config (setq vterm-toggle-hide-method 'delete-window)
      :bind*
      ("<f9>" . vterm-toggle)
      ("C-c n" . vterm-toggle-forward)
      ("C-c p" . vterm-toggle-backward))

#+end_src
